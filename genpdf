#!/usr/bin/env bash

# genpdf - Generate PDF files from Jupyter notebooks
#
# This script converts Jupyter notebooks to PDF format. It can either process
# all notebooks in the current directory (and one level deep) or only process
# notebooks that have corresponding changed Python files in git.
#
# Usage:
#   genpdf             - Convert all found notebooks to PDF
#   genpdf -c          - Convert only notebooks with changed .py files
#   genpdf --changed-only  - Same as -c
#
# Options:
#   -c, --changed-only    Only process notebooks with changed .py files
#
# Dependencies:
#   - quarto
#   - git (when using --changed-only)
#
# Output:
#   - Generated PDFs will be in the same directory as source notebooks
#   - Errors are logged to genpdfall.out
#
require() {
  hash "$@" || exit 127
}

# Set default value for changed_only
changed_only=false
# Parse command line options

while [ $# -gt 0 ]; do
  case "$1" in
    -c | --changed-only)
      changed_only=true
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
  shift
done

require find git quarto tee
rm -f genpdf.out || {
  echo "File permissions problem"
  exit 1
}
declare -i exitcode=0
nbfiles=()

if [ "$changed_only" = true ]; then
  readarray -t nbfiles < <(git status -s "$@" | awk -F " " 'BEGIN {FILTER=".py$"} {if (match(tolower($2), FILTER)) {print $2}}' | sed 's/\.py$/.ipynb/')
else
  readarray -t nbfiles < <(find . -maxdepth 2 -name "*.ipynb" -not -path "./.ipynb_checkpoints/*")
fi

if [ ${#nbfiles[@]} -eq 0 ]; then
  echo "No files found."
else
  quarto render "${nbfiles[@]}" --to pdf 2>&1 | tee genpdf.out
  exitcode=$?
fi

if [ "$exitcode" -gt 0 ]; then
  echo "Errors generating pdf files. Check genpdf.out for errors."
fi
exit "$exitcode"
